#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

s_executePipeline = function(Frame[String] pipeline, Matrix[Double] X,  Matrix[Double] Y, Matrix[Double] mask,
  List[Unknown] hyperParameters, Integer resource_index, Boolean verbose)
  return (Matrix[Double] X, Matrix[Double] Y)
{

  print("PIPELINE EXECUTION START ... "+toString(pipeline))

  if(verbose) {
    print("checks   rows in X = "+nrow(X)+" rows in Y = "+nrow(Y)+" cols in X = "+ncol(X)+" col in Y = "+ncol(Y))
    print("pipeline in execution "+toString(pipeline))
    print("pipeline hps "+toString(hyperParameters))
    print("index "+toString(resource_index))
    while(FALSE){}
  }
  for(i in 1:ncol(pipeline)) {

    op = as.scalar(pipeline[1,i])
    [hp, withClass, dataFlag] = matrixToList(X, Y, mask, as.matrix(hyperParameters[i]), resource_index, op)
    Xclone = X
    X = eval(op, hp)
    while(FALSE){}
    # dataFlag 0 = only on numeric, 1 = on whole data
    X = confirmData(X, Xclone, mask, dataFlag)
    if(withClass)
    {
      Y = X[, ncol(X)]
      X = X[, 1:ncol(X) - 1]
    }

    X = confirmMeta(X, mask)
  }
  print("END OF PIPELINE"+toString(pipeline))
  while(FALSE){}
}

# This function will convert the matrix row-vector into list
matrixToList = function(Matrix[Double] X,  Matrix[Double] Y, Matrix[Double] mask, Matrix[Double] p, Integer resource_index, String op)
  return (List[Unknown] l, Boolean hasY, Integer dataFlag)
{

  hasY = FALSE

  dataFlag = as.integer(as.scalar(p[1, ncol(p)]))
  hasVerbose = as.scalar(p[1, ncol(p) - 1])
  yFlag = as.scalar(p[1, ncol(p) - 2])
  maskFlag = as.integer(as.scalar(p[1, ncol(p)-3]))
  
  ######################################################
  # CHECK FOR DATA FLAG
  if(dataFlag == 0)
  { 
    # take numerics out
    X = removeEmpty(target=X, margin = "cols", select = (mask == 0))
  }
  else if(dataFlag == 1)
  { 
    # take categorical out
    X = removeEmpty(target=X, margin = "cols", select = mask)
    # print("data for execution \n"+toString(X, rows=5))
  } 
  
  l = list(X)
    
  ######################################################
  # CHECK FOR Y APPEND FLAG  
 
  if(yFlag == 1) {
    l = append(l, Y)
    hasY = TRUE
  }
  ######################################################
  # CHECK FOR MASK APPEND FLAG
  if(maskFlag == 1)
  {
    l = append(l, mask)
  }
  #####################################################
  # POPULATE HYPER PARAM
  if(ncol(p) > 4) {
    if(op == "pca") {
      ratio = as.scalar(p[resource_index,1])
      p[resource_index, 1] = as.integer(ncol(X) - ratio)
    }
    for(i in 1:ncol(p)-4)
      l = append(l, as.scalar(p[resource_index,i]))
  }
  ######################################################
  # CHECK FOR VERBOSE FLAG
  if(hasVerbose == 1)
    l = append(l, FALSE)
   # print("+++++++++++HP++++++++++++++")
   # print(toString(l, rows=2))
}

confirmMeta = function(Matrix[Double] X, Matrix[Double] mask)
return (Matrix[Double] X)
{
  if((sum(mask) > 0) & (ncol(X) == ncol(mask)))
  {
    # get  the max + 1 for nan replacement
    nanMask = is.na(X)
    # replace nan
    X = replace(target = X, pattern = NaN, replacement = 9999)
    # take categorical out
    cat = removeEmpty(target=X, margin="cols", select = mask)
    # round categorical (if there is any floating  point)
    cat = ceil(cat)
    # reconstruct original X
    X = X * (mask == 0)
    q = table(seq(1, ncol(cat)), removeEmpty(target=seq(1, ncol(mask)), margin="rows", 
      select=t(mask)), ncol(cat), ncol(X))
    X = (cat %*% q) + X 

    # put nan back
    nanMask = replace(target = nanMask, pattern = 1, replacement = NaN)
    X = X + nanMask
    # print("X less than equal to  zero "+sum(cat <= 0))
  }
}


confirmData = function(Matrix[Double] nX, Matrix[Double] originalX, Matrix[Double] mask, Integer dataFlag)
return (Matrix[Double] X)
{
  # print("changes data \n"+toString(nX, rows=10))
  
  while(FALSE){}
  if(dataFlag == 0 & (sum(mask) > 0))
  {
    maxDummy = max(nX) + 1
    nX = replace(target = nX, pattern = NaN, replacement = maxDummy)
    # X without numerics
    Xcat = removeEmpty(target=originalX, margin="cols", select=mask)
    nanMask = is.na(Xcat)
    Xcat = replace(target = Xcat, pattern = NaN, replacement = -1111)
    # print("unchanged data \n"+toString(originalX, rows=10))
    
    # reconstruct the original matrix
    p = table(seq(1, ncol(nX)), removeEmpty(target=seq(1, ncol(mask)), margin="rows", 
    select=t(mask==0)), ncol(nX), ncol(originalX))
    q = table(seq(1, ncol(Xcat)), removeEmpty(target=seq(1, ncol(mask)), margin="rows", 
    select=t(mask)), ncol(Xcat), ncol(originalX))
    X = (nX %*% p) + (Xcat %*% q) 

    X = replace(target = X, pattern = maxDummy, replacement = NaN)
    X = replace(target = X, pattern = -1111, replacement = NaN)
  }
  else if(dataFlag == 1 & (sum(mask) > 0))
  {
    maxDummy = max(nX) + 1
    nX = replace(target = nX, pattern = NaN, replacement = maxDummy)
    # X without categorical
    Xnum = removeEmpty(target=originalX, margin="cols", select=(mask==0))
    nanMask = is.na(Xnum)
    Xnum = replace(target = Xnum, pattern = NaN, replacement = -1111)
    # reconstruct the original matrix
    p = table(seq(1, ncol(Xnum)), removeEmpty(target=seq(1, ncol(mask)), margin="rows", 
    select=t(mask==0)), ncol(Xnum), ncol(originalX))
    q = table(seq(1, ncol(nX)), removeEmpty(target=seq(1, ncol(mask)), margin="rows", 
    select=t(mask)), ncol(nX), ncol(originalX))
    X = (nX %*% q) + (Xnum %*% p) 
    X = replace(target = X, pattern = maxDummy, replacement = NaN)
    X = replace(target = X, pattern = -1111, replacement = NaN)
  
  }
  else X = nX
    # print("recreated data \n"+toString(X, rows = 20))
}

#######################################################################
# Wrapper of transformencode OHE call, to call inside eval as a function
# Inputs: The input dataset X, and  mask of the columns
# Output: OHEd matrix X
#######################################################################

dummycoding = function(Matrix[Double] X, Matrix[Double] mask)
return (Matrix[Double] dX_train) {
  X = replace(target=X, pattern=NaN, replacement=0)
  idx = vectorToCsv(mask)
  
  # specifications for one-hot encoding of categorical features
  jspecDC = "{ids:true, dummycode:["+idx+"]}";
  # OHE of categorical features
  [dX_train, dM] = transformencode(target=as.frame(X), spec=jspecDC);

}
