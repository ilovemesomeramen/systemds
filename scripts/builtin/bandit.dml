#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

m_bandit = function(Matrix[Double] X_train, Matrix[Double] Y_train, Matrix[Double] mask, Matrix[Double] MLhp,
  Frame[Unknown] schema, Frame[Unknown] lp, Frame[Unknown] primitives, Frame[Unknown] param,  Integer k = 3,
  Double testAccuracy = 0.8, Boolean isWeighted, Integer R=50, Integer cv=3, Boolean verbose = TRUE)
  return (Frame[Unknown] bestPipeline, Matrix[Double] bestHyperparams,  Matrix[Double] bestAccuracy) 
{
  print("null in data "+sum(is.na(X_train)))
  bestPipeline = frame("", rows=1, cols=1)
  bestHyperparams = as.matrix(0)
  bestAccuracy = as.matrix(0)
  # initialize bandit variables
  # variable names follow publication where algorithm is introduced
  eta = 2  # the halving ratio is fixed to 2
  s_max = floor(log(R,eta));
  B = (s_max + 1) * R;
  
  # initialize output variables
  hparam = matrix(0, rows=k*(s_max+1), cols=55)
  pipeline = frame(0, rows=k*(s_max+1), cols=ncol(lp)+1)
  startOut=0; endOut=0;
  for(s in s_max:0, check = 0) {
    
   # result variables
    bracket_hp = matrix(0, rows=k*(s+1)+k, cols=55)
    bracket_pipel = matrix(0, rows=k*(s+1)+k, cols=3)
    start=1; end=0;
    
    # # compute the number of initial pipelines n
    n = ceil(floor(B/R/(s+1)) * eta^s);
    r = R * eta^(-s);
    # get the physical pipelines, the pipelines, pipelines are recoded
    [configurations, n] = get_physical_configurations(lp, n, primitives)

    # append configuration keys for extracting the pipeline later on
    id = seq(1, nrow(configurations))
    configurations = cbind(as.frame(id), configurations)
    # save the original configuration as a lookup table
    lookup = configurations
    
    if(verbose) 
      print("n "+ n +"\n R "+ R +"\n s_max "+ s_max +"\n B "+ B +"\n n "+ n +"\n r "+ r)
    
    for( i in 0:s, check=0 ) {
      # successive halving    
      n_i = min(max(as.integer(floor(n * eta^(-i))), 1), nrow(configurations));
      r_i = as.integer(floor(r * eta^i));
      
      if(verbose) {
        print("no of configurations ---------"+n_i)
        print("no of resources --------------"+r_i)
        print("iteration  ---------------------"+i)
      }
      
      configurations = configurations[1:n_i, ]      
      [outPip,outHp] = run_with_hyperparam(configurations, r_i, X_train, Y_train, mask, 
        MLhp, schema, param, isWeighted, testAccuracy, cv,  verbose)
      # sort the pipelines by order of accuracy decreasing
      a = order(target = outPip, by = 1, decreasing=TRUE, index.return=FALSE)
      b = order(target = outHp, by = 1, decreasing=TRUE, index.return=FALSE)
      rowIndex = ifelse(nrow(a) >= k, k, nrow(a))
            
      # maintain the brackets results
      end = end + rowIndex
      bracket_pipel[start:end, ] =  a[1:rowIndex,]
      bracket_hp[start:end, 1:ncol(b)] =  b[1:rowIndex,]
      start = end + 1

      # sort the configurations fro successive halving
      avergae_perf =  getMaxPerConf(outPip)     #as.frame(aggregate(target=a[, 1], groups=a[, 2], fn="mean"))
      print("configurations "+toString(configurations))
      while(FALSE){}
      configurations = frameSort(cbind(avergae_perf, configurations))
      configurations = configurations[, 2:ncol(configurations)]
    }
    bracket_pipel = removeEmpty(target=bracket_pipel, margin="rows")
    bracket_hp = removeEmpty(target=bracket_hp, margin="rows")
    # keep the best k results for each bracket
    [bracket_bestPipeline, bracket_bestHyperparams] = extractBracketWinners(bracket_pipel, bracket_hp, k, lookup)
    
    # print("after "+i+" bracket ")
    # print(toString(bracket_bestPipeline))
    # print("------------------")
    # print(toString(bracket_bestHyperparams))  
    # while(FALSE){}
    
    startOut = endOut + 1
    endOut = endOut + nrow(bracket_bestPipeline)
    pipeline[startOut: endOut, ] = bracket_bestPipeline
    hparam[startOut:endOut, 1:ncol(bracket_bestHyperparams)] = bracket_bestHyperparams
  }
  
  # print("after all brackets ")
  # while(FALSE){}
  # print(toString(pipeline))
  # print("------------------")
  # print(toString(hparam))
  # while(FALSE){}
  # extract best top k from all iterations
  [bestPipeline, bestHyperparams] = extractTopK(pipeline, hparam, testAccuracy, k)

  bestAccuracy = as.matrix(bestPipeline[,1])
  bestPipeline = bestPipeline[,2:ncol(bestPipeline)]
  bestHyperparams = bestHyperparams[,2:ncol(bestHyperparams)]
  
  if(verbose) {
    print("best pipeline"+ toString(bestPipeline))
    print("best hyper-parameters \n"+ toString(bestHyperparams))
    print("best accuracy \n"+ toString(bestAccuracy))
    print("dirty accuracy "+testAccuracy)
  }
}


# this method will extract the physical pipelines for a given logical pipelines

get_physical_configurations = function(Frame[String] logical, Scalar[int] numConfigs, 
  Frame[Unknown] primitives)
  return(Frame[String] physical, Double min)
{
  # load the primitives
  physical = as.frame("NaN")
  outliers = primitives[,1]
  mvi = primitives[,2]
  noise = primitives[,3]
  ci = primitives[,4]
  dim = primitives[,5]
  dummy = primitives[,6]
  scale = primitives[,7]

 
  operator = as.frame(matrix(0,nrow(outliers),1)) #combine all logical primitives
  for(j in 1:ncol(logical))
  {
    # extract the physical primitives
    if(as.scalar(logical[1,j]) == "OTLR")
      operator = cbind(operator, outliers);
    else if(as.scalar(logical[1,j]) == "MVI")
      operator = cbind(operator, mvi);
    else if(as.scalar(logical[1,j]) == "NR")
      operator = cbind(operator, noise);  
    else if(as.scalar(logical[1,j]) == "CI")
      operator = cbind(operator, ci);
    else if(as.scalar(logical[1,j]) == "DIM")
      operator = cbind(operator, dim);
    else if(as.scalar(logical[1,j]) == "DUMMY")
      operator = cbind(operator, dummy);  
    else if(as.scalar(logical[1,j]) == "SCALE")
      operator = cbind(operator, scale);
    else stop("invalid operation "+as.scalar(logical[1,j]))
  }
  opt = operator[,2:ncol(operator)] 

  idx = matrix(1, rows=1, cols=ncol(logical))
  # get the indexes of columns for recode transformation
  index = vectorToCsv(idx)
  # recode logical pipelines for easy handling
  jspecR = "{ids:true, recode:["+index+"]}";
  [X, M] = transformencode(target=opt, spec=jspecR);
  X = replace(target= X, pattern = NaN, replacement = 0)
  
  paramLens = matrix(0, ncol(logical), 1);
  for( j in 1:ncol(logical)) {
    vect = removeEmpty(target = X[,j], margin = "rows");
    paramLens[j,1] = nrow(vect);
  }
  min = prod(paramLens)
  sample = ifelse(min > numConfigs, TRUE, FALSE)
  paramVals = matrix(0, ncol(logical), max(paramLens));
  for( j in 1:ncol(logical) ) {
    vect = removeEmpty(target = X[,j], margin = "rows");
    paramVals[j,1:nrow(vect)] = t(vect);
  }
  cumLens = rev(cumprod(rev(paramLens))/rev(paramLens));
  # materialize hyper-parameter combinations 
  HP = matrix(0, min(numConfigs, min), ncol(logical));
  if(sample) 
    pip = sample(numConfigs,numConfigs)
  else pip = seq(1,nrow(HP))
  for( i in 1:nrow(HP) ) {
    for( j in 1:ncol(logical) ) {
      HP[i,j] = paramVals[j,as.scalar((as.scalar(pip[i,1])/cumLens[j,1])%%paramLens[j,1]+1)];
    }
  }
  
  physical = transformdecode(target=HP, spec=jspecR, meta=M);
  print("physical pipeline "+toString(physical))
}

# this method will call the execute pipelines with their hyper-parameters
run_with_hyperparam = function(Frame[Unknown] ph_pip, Integer r_i, Matrix[Double] X, Matrix[Double] Y,
  Matrix[Double] mask, Matrix[Double] MLhp, Frame[Unknown] schema, Frame[Unknown] param, Boolean isWeighted,
  Double testAccuracy, Integer cv=3, Boolean verbose)                    
  return (Matrix[Double] output_operator, Matrix[Double] output_hyperparam) {

  output_hp = matrix(0, nrow(ph_pip)*r_i, 50)
  output_accuracy = matrix(0, nrow(ph_pip)*r_i, 1)
  output_pipelines = matrix(0, nrow(ph_pip)*r_i, 2)

  # rows in validation set
  clone_X = X
  clone_Y = Y
  index = 1
  id = as.matrix(ph_pip[, 1])
  ph_pip = ph_pip[, 2:ncol(ph_pip)]
  for(i in 1:nrow(ph_pip))
  {
    # execute configurations with r resources
    hp = getHyperparam(ph_pip[i], param, r_i)  
    for(r in 1:r_i)
    {    
      [X, Y] = executePipeline(ph_pip[i], X, Y, mask, hp, r, FALSE)
      accuracy = fclassify(X, Y, mask, MLhp, testAccuracy, isWeighted, cv)
      hp_vec = listToVector(hp, FALSE)
      output_accuracy[index, 1] = accuracy
      output_hp[index, 1:ncol(hp_vec)] = hp_vec
      output_pipelines[index, ] = cbind(as.matrix(i), id[i,1])
      X = clone_X
      Y = clone_Y
      while(FALSE){}
      index = index + 1
      # hp = getHyperparam(ph_pip[i,], param)  
    }
    
    X = clone_X
    Y = clone_Y
  }
  output_hyperparam = removeEmpty(target=cbind(output_accuracy, output_hp), margin="rows")
  output_operator = removeEmpty(target=cbind(output_accuracy, output_pipelines) ,margin="rows")
}

# extract the hyper-parameters for pipelines
getHyperparam = function(Frame[Unknown] pipeline, Frame[Unknown]  hpList, Integer no_of_res)
  return (List[Unknown] paramList)
{
  # load the hyper-parameters values
  paramList = list()
  allParam = 0;
  # store the row indexes of the operator matches
  indexes = matrix(0, rows= ncol(pipeline), cols=1)
  for(k in 1:ncol(pipeline))
  {
    op = as.scalar(pipeline[1,k])
    hasParam = map(hpList[,1], "x->x.split(\",\")[0].equals(\""+op+"\")")    
    # convert the boolean vector to 0/1 matrix representation
    m_hasParam = hasParam == frame("true", rows=nrow(hasParam), cols=1)
    m_hasParam = as.matrix(m_hasParam)
    # compute the relevant index 
    index = m_hasParam * seq(1, nrow(m_hasParam))
    index = as.scalar(removeEmpty(target = index, margin = "rows"))
    indexes[k] = index
    no_of_param = as.integer(as.scalar(hpList[index, 2]))
    allParam = no_of_param + allParam
  }
  # if there are no hyper-parameters than change the values of resources
  # so that the pipeline is only executed once and no resource are wasted, saving looping
  no_of_res = ifelse(allParam > 0, no_of_res, 1)
  
  for(i in 1:ncol(pipeline)) {
    index = as.scalar(indexes[i])
    no_of_param = as.integer(as.scalar(hpList[index, 2]))

    # extract hasY and verbose flags
    attachMask = matrix(as.scalar(hpList[index, 3]), rows=no_of_res, cols=1)
    attachY = matrix(as.scalar(hpList[index, 4]), rows=no_of_res, cols=1)
    isVerbose = matrix(as.scalar(hpList[index, 5]), rows=no_of_res, cols=1)
    dataFlag = matrix(as.scalar(hpList[index, 6]), rows=no_of_res, cols=1)
    
    if(no_of_param > 0) {
      start = 7
      t = 7
      OpParam = matrix(0, no_of_res, no_of_param)
      for(j in 1:no_of_param) {
        type = as.scalar(hpList[index, t])
        paramValIndex = (no_of_param) + start
        minVal =  as.scalar(hpList[index, paramValIndex])
        maxVal = as.scalar(hpList[index, paramValIndex + 1])
        if(type == "FP") {
          val = rand(rows=no_of_res, cols=1, min=minVal,
                          max=maxVal, pdf="uniform");
          OpParam[, j] = val
        }
        else if(type == "INT") {
          # val = ifelse(minVal == maxVal , minVal, as.scalar(sample(maxVal, 1)));
          val = sample(maxVal, no_of_res, TRUE)
          less_than_min = val < minVal
          val = (less_than_min * minVal) + val
          OpParam[, j] = val
        }
        else if(type == "BOOL") {
          if(maxVal == 1) {
            s = sample(2, no_of_res, TRUE)
            b = s - 1
            OpParam[, j] = b
          }
          else  OpParam[, j] = matrix(0, rows=no_of_res, cols=1)
        }
        else {
          # TODO handle string set something like {,,}
          print("invalid data type")
        }
        start = start + 2
        t = t + 1
      }
      OpParam = cbind(OpParam, attachMask, attachY, isVerbose, dataFlag)
    }
    else {
      OpParam = cbind(attachMask, attachY)
      OpParam = cbind(OpParam, isVerbose, dataFlag)
    }
    while(FALSE){}
    paramList = append(paramList, OpParam)
  }
}


# method to convert the operators from a list to a vector representation 
# so that the could be append in an output matrix
listToVector = function(List[Unknown] hp, Boolean verbose)
return (Matrix[Double] hp_vec)
{
  hp_vec = matrix(0,1,1)
  len = length(hp)
  for(k in 1:len) {
    mat = as.matrix(hp[k])
    hpy = cbind(as.matrix(ncol(mat)), mat)
    hp_vec = cbind(hp_vec, hpy)
  }
  hp_vec = hp_vec[1, 2:ncol(hp_vec)]
}

# function to classify the data using cross validation
fclassify = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] mask, Matrix[Double] MLhp,
  Double testAccuracy, Boolean isWeighted, Integer cv=3)
  return (Double accuracy)
{
 
  if(max(Y) == min(Y)) {
    print("Y contains only one class")
    accuracy = as.double(0)
  }
  else { 
    print("STARTING "+cv+" CROSS VALIDATIONS")
    # do the k = 3 cross validations
    accuracyMatrix = crossV(X, Y, cv, mask, MLhp, isWeighted)
    accuracyMatrix = removeEmpty(target=accuracyMatrix, margin="rows")
    acc = colMeans(accuracyMatrix)
    accuracy = as.scalar(acc[1,1])
    print("validation accuracy "+accuracy)
  }
}


# extract the top k pipelines as a final result after deduplication and sorting
extractTopK = function(Frame[Unknown] pipeline, Matrix[Double] hyperparam, 
  Double testAccuracy, Integer k)
  return (Frame[Unknown] bestPipeline, Matrix[Double] bestHyperparams)
{

  idx = vectorToCsv(seq(1, ncol(pipeline)))
  jspecDC = "{ids:true, recode:["+idx+"]}";
  # OHE of categorical features
  [dpipeline, dM] = transformencode(target=pipeline, spec=jspecDC);
  # bind the pipelines and hyper-parameters into one matrix
  forDedup = cbind(dpipeline, hyperparam) 
  # perform the similarity based deduplication
  dup = mdedup(cbind(pipeline, as.frame(hyperparam)), matrix(seq(2, ncol(forDedup)), 1,
    ncol(forDedup)-1), matrix(1,1,ncol(forDedup)-1), as.matrix(1), as.matrix(1), FALSE)

  if(sum(dup) > 0)
  {
    # take out the unique tuples
    uniqueTuples =  removeEmpty(target= forDedup, margin="rows", select = (dup ==0))
    # remove the zero rows, identifiers of unique records
    dup =  removeEmpty(target = dup, margin="rows")
    # get the counts of duplicate tuples with their tuple id
    countDist = table(dup, 1) > 0
    countDist = countDist * seq(1, nrow(countDist))
    countsVal = removeEmpty(target= countDist, margin="rows")
    indexes = table(seq(1, nrow(countsVal)),countsVal,1,nrow(countsVal), cols=nrow(forDedup))

    # for each duplicate record just take the one reocrd and strip the others
    deduplicates = indexes %*% forDedup
  
    # combine the deduplicated tuples and unique tuples again 
    forDedup = rbind(uniqueTuples, deduplicates)
  }
  
  # decode the pipelines 
  decoded = transformdecode(target=forDedup[, 1:ncol(pipeline)], meta=dM, spec=jspecDC)
  
  # separate the pipelines and hyper-parameters
  pipeline = decoded[, 1:ncol(pipeline)]
  hyperparam = forDedup[, ncol(pipeline)+1:ncol(forDedup)]

  # sort results
  hyperparam = order(target = hyperparam, by = 1, decreasing=TRUE, index.return=FALSE)
  pipeline = frameSort(pipeline)


  # remove the row with accuracy less than test accuracy 
  mask = (hyperparam[, 1] < testAccuracy) == 0
  hyperparam = removeEmpty(target = hyperparam, margin = "rows", select = mask)
  rowIndex = ifelse(nrow(hyperparam) > k, k, nrow(hyperparam))
  # select the top k
  bestPipeline = pipeline[1:rowIndex,]
  bestHyperparams = hyperparam[1:rowIndex,]
  
}



# extract the top k pipelines for each bracket, the intermediate results
extractBracketWinners = function(Matrix[Double] pipeline, Matrix[Double] hyperparam, 
  Integer k, Frame[Unknown] conf)
  return (Frame[Unknown] bestPipeline, Matrix[Double] bestHyperparams)
{

  # bestPipeline = frameSort(bestPipeline)
  hyperparam = order(target = hyperparam, by = 1, decreasing=TRUE, index.return=FALSE)
  pipeline = order(target = pipeline, by = 1, decreasing=TRUE, index.return=FALSE)
  
  rowIndex = ifelse(nrow(pipeline) > k, k, nrow(pipeline))

  pipeline = pipeline[1:rowIndex,]
  bestHyperparams = hyperparam[1:rowIndex,]
  bestPipeline = frame(data="|", rows=nrow(pipeline), cols=ncol(conf)-1)
  for(i in 1: nrow(pipeline), check=0)
  {
    index = as.scalar(pipeline[i, 3])
    bestPipeline[i, 1:ncol(bestPipeline)] = conf[index, 2:ncol(conf)]
  }
  bestPipeline = cbind(as.frame(pipeline[, 1]),  bestPipeline)
  
}



# smote wrapper for doing relative over-sampling
SMOTE  = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] mask, Integer remainingRatio, Boolean verbose)
return (Matrix[Double] XY)
{
  XY = order(target = cbind(Y, X),  by = 1, decreasing=FALSE, index.return=FALSE)
  # get the class count 
  classes = table(XY[, 1], 1)
  print("before smote")
  print(toString(classes))
  while(FALSE){}
  start_class = 1
  end_class = 0
  k = table(XY[, 1], 1)
  getMax = max(k)
  maxKIndex = as.scalar(rowIndexMax(t(k)))
  outSet = matrix(0, 0, ncol(XY))
    print("remaining ration before "+remainingRatio)
  remainingRatio = ifelse((remainingRatio%%100) >= 50, remainingRatio+(100 - (remainingRatio%%100)),
    remainingRatio-(remainingRatio%%100))
  print("remaining ration after "+remainingRatio)
  for(i in 1: nrow(k)) {
    end_class = end_class + as.scalar(classes[i])
    class_t = XY[start_class:end_class, ]
    # remainingRatio = (round(getMax/nrow(class_t)) - 1) * 100
    if((i != maxKIndex)) {
      synthesized = smote(class_t[, 2:ncol(XY)], mask, remainingRatio, 1, FALSE)
      synthesized = cbind(matrix(as.scalar(class_t[2,1]), nrow(synthesized), 1), synthesized)
      outSet = rbind(outSet, synthesized)
      if(verbose) {
        print("max value: "+getMax)
        print("values of i: "+i)
        print("remaining ratio: "+remainingRatio)
      }
    }
    start_class = end_class + 1
  }
  
  XY = rbind(XY, synthesized)
  Y = XY[, 1]
  X = XY[, 2:ncol(XY)]
  XY = cbind(X,Y)
  classes = table(Y, 1)
  print("after smote")
  print(toString(classes))
}

# constraints over hyper parameters
verifyHp = function(Integer index, Frame[Unknown] pip, Double minVal, Double maxVal, Integer paraNo)
return (Double minVal, Double maxVal) {
  op = as.scalar(pip[1,index])
  # 1. if next op is pca then current op should not leave NaNs in data
  # 2. if next op is mice then current op should not replace NaNs with zeros
  
  if((op == "outlierBySd" | op == "outlierByIQR") & index < ncol(pip) & paraNo == 2)
  {
    nextOp = as.scalar(pip[1, index + 1])
    if(nextOp == "pca" | nextOp == "abstain" | nextOp == "SMOTE")
    {
      maxVal = 1.0
    }
    if(nextOp == "mice")
    {
      minVal = 2.0
    }
  }
  # print("now min and max val ")
  # print(minVal+" "+maxVal)
  
}


#####################################
# The function will replace the null with default values
######################################
fillDefault = function(Matrix[Double] X)
return(Matrix[Double] X){
  defaullt = round(colMaxs(X) - colMins(X))
  Mask = is.na(X)
  X = replace(target=X, pattern=NaN, replacement=0)
  Mask = Mask * defaullt
  X = X + Mask
}

#####################################
# The function will return the max performance by each individual pipeline
######################################
getMaxPerConf = function(Matrix[Double] pipelines)
return (Frame[Unknown] maxperconf)
{
  tab = removeEmpty(target=table(pipelines[, 2], pipelines[, 3], pipelines[, 1]), margin="cols")  
  maxperconf = frame(0, rows=max(pipelines[, 2]), cols=1)
  maxperconf = as.frame(t(colMaxs(tab)))

}


#####################################
# The function will check if the pipeline have zero hyper-parameters
# then it should not use more resource iterations and should be executed once
######################################
isResourceOptimal = function(List[Unknown] param, Boolean verbose)
return(Boolean validForResources) 
{
  validForResources = FALSE

  count = 0
  for(i in 1:length(param))
  {
    hp = as.matrix(param[i])
    if(ncol(hp) > 4)
      count += 1
  }
  validForResources = count > 0
}



#######################################################################
# Wrapper of transformencode OHE call, to call inside eval as a function
# Inputs: The input dataset X, and  mask of the columns
# Output: OHEd matrix X
#######################################################################

dummycoding = function(Matrix[Double] X, Matrix[Double] mask)
return (Matrix[Double] dX_train) {
  X = replace(target=X, pattern=NaN, replacement=0)
  idx = vectorToCsv(mask)
  
  # specifications for one-hot encoding of categorical features
  jspecDC = "{ids:true, dummycode:["+idx+"]}";
  # OHE of categorical features
  [dX_train, dM] = transformencode(target=as.frame(X), spec=jspecDC);

}


#######################################################################
# Wrapper of imputeByFD OHE call, to call inside eval as a function
# Inputs: The input dataset X, and  mask of the columns and threshold value
# Output: filled matrix X
#######################################################################

imputeByFd = function(Matrix[Double] X, Matrix[Double] mask, Double threshold)
return (Matrix[Double] X_filled)
{
  
  FD = discoverFD(replace(target=X, pattern=NaN, replacement=1), mask, threshold)
  diagonal = diag(FD)

  for(i in 1: nrow(FD))
  {
    for(j in 1:ncol(FD)) {
    if(as.scalar(FD[i, j]) > threshold)
      X = imputeByFD(X, i, j, threshold, FALSE)
    
    }
  }
  X_filled = X
}

#######################################################################
# Wrapper of na_lof to call inside eval as a function
# Output: filled matrix X
#######################################################################

forward_fill = function(Matrix[Double] X, Boolean op, Boolean verbose)
return (Matrix[Double] X_filled)
{ 
  option = ifelse(op, "locf", "nocb")
  X_filled = na_locf(X=X, option=option, verbose=verbose)
}
