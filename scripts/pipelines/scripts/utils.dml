#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
vectorToCsv = function(Matrix[Double] mask)
return (String indexes){

  vector  = mask * t(seq(1, ncol(mask)))
  vector = removeEmpty(target = vector, margin = "cols")
  if(nrow(vector) >  ncol(vector))
    vector = t(vector)
  s = ""
  if(ncol(vector) > 1) {
    for(i in 1:ncol(vector)-1)
      s = s+as.integer(as.scalar(vector[1,i]))+","
  }
  indexes = s+as.integer(as.scalar(vector[1,ncol(vector)]))
}

# remove empty wrapper for frames
frameRemoveEmpty = function(Frame[Unknown] target, String margin, Matrix[Double] select)
return (Frame[Unknown] frameblock)
{
  idx = seq(1, ncol(target))
  # get the indexes of columns for recode transformation
  index = vectorToCsv(idx)
  #########################################################
  # vector  = mask * t(seq(1, ncol(mask)))
  # vector = removeEmpty(target = vector, margin = "cols")
  # if(nrow(vector) >  ncol(vector))
    # vector = t(vector)
  # s = ""
  # if(ncol(vector) > 1) {
    # for(i in 1:ncol(vector)-1)
      # s = s+as.integer(as.scalar(vector[1,i]))+","
  # }
  # index = s+as.integer(as.scalar(vector[1,ncol(vector)]))
  #########################################################
  
  # recode logical pipelines for easy handling
  jspecR = "{ids:true, recode:["+index+"]}";
  [Xd, M] = transformencode(target=target, spec=jspecR);
  X = replace(target=Xd, pattern = NaN, replacement=0)
  if(nrow(select) > 1)
    X = removeEmpty(target = X, margin = margin, select = select)
  else  
    {
      X = removeEmpty(target = X, margin = margin)
    }
    
  frameblock = transformdecode(target = Xd, spec = jspecR, meta = M)
  frameblock = frameblock[1:nrow(X), 1:ncol(X)]
}





#######################################################################
# Function for group-wise/stratified sampling from all classes in labelled dataset
# Inputs: The input dataset X, Y  and  sampling ratio between 0 and 1
# Output: sample X and Y
#######################################################################
doSample = function(Matrix[Double] eX, Matrix[Double] eY, Double ratio)
  return (Matrix[Double] eX, Matrix[Double] eY)
{
  MIN_SAMPLE = 10000
  sampled = floor(nrow(eX) * ratio)
  sample = ifelse(sampled > MIN_SAMPLE, TRUE, FALSE)
  if(sample)
  {
    XY = order(target = cbind(eY, eX),  by = 1, decreasing=FALSE, index.return=FALSE)
    # get the class count 
    classes = table(eY, 1)
    print("classes")
    print(toString(classes))
    while(FALSE){}
    start_class = 1
    out_s = 1 
    out_e = 0
    end_class = 0
  
    out = matrix(0, sampled, ncol(XY))
    classes_ratio = floor(classes*ratio)
    print("class ratio "+toString(classes_ratio))
    for(i in 1:nrow(classes))
    {
      end_class = end_class + as.scalar(classes[i])
      class_t = XY[start_class:end_class, ]
      out_e = out_e + as.scalar(classes_ratio[i]) 
      out[out_s:out_e, ] = class_t[1:as.scalar(classes_ratio[i]), ] 
      out_s = out_e + 1
      start_class = end_class + 1
    }
    out = removeEmpty(target = out, margin = "rows")
    eY = out[, 1]
    eX = out[, 2:ncol(out)]
  }
}

#######################################################################
# Wrapper of transformencode OHE call, to call inside eval as a function
# Inputs: The input dataset X, and  mask of the columns
# Output: OHEd matrix X
#######################################################################

dummycoding = function(Matrix[Double] X, Matrix[Double] mask)
return (Matrix[Double] dX_train) {

  idx = vectorToCsv(mask)
  
  # specifications for one-hot encoding of categorical features
  jspecDC = "{ids:true, dummycode:["+idx+"]}";
  # OHE of categorical features
  [dX_train, dM] = transformencode(target=as.frame(X), spec=jspecDC);

}




# ####################################################################
# # Function for classifying the dirty dataset, makes a call to crossV()
# # Inputs: takes the input dataset X, Y and the value of k validation, mask of the 
# # dataset for OHE of categorical columns, vector of ML hyper-parameters identified 
# # via gridsearch and a boolean value of (un)weighted accuracy.
# # Output: It return a matrix having the accuracy of each fold.
# ####################################################################
# classifyDirty = function(Matrix[Double] Xtrain, Matrix[Double] ytrain, Matrix[Double] opt, 
  # Matrix[Double] mask, Boolean isWeighted = TRUE, Integer cv)
  # return (Double accuracy)
# {
  # # # classify without cleaning fill with edfault values 1
  # Xtrain = replace(target = Xtrain, pattern = NaN, replacement=0)
  # dX_train = dummycoding(Xtrain, mask)
  # accuracy = crossV(Xtrain, ytrain, cv, mask, opt, isWeighted)
  # accuracy = mean(accuracy)
  # print("cross validated dirty accuracy "+accuracy)
# }


# # ######################################################################
# # # # Function for cross validation using hold out method
# # # # Inputs: The input dataset X, Y and the value of k validation, mask of the 
# # # # dataset for OHE of categorical columns, vector of ML hyper-parameters identified 
# # # # via gridsearch and a boolean value of (un)weighted accuracy.
# # # # Output: It return a matrix having the accuracy of each fold.
# # ######################################################################

# crossV = function(Matrix[double] X, Matrix[double] y, Integer k, Matrix[Double] mask,
  # Matrix[Double] MLhp, Boolean isWeighted) 
# return (Matrix[Double] accuracyMatrix)
# {

  # accuracyMatrix = matrix(0, k, 1)

  # dataList = list()
  # testL = list()
  # data = order(target = cbind(y, X),  by = 1, decreasing=FALSE, index.return=FALSE)
  # classes = table(data[, 1], 1)
  # ins_per_fold = classes/k
  # start_fold = matrix(1, rows=nrow(ins_per_fold), cols=1)
  # fold_idxes = cbind(start_fold, ins_per_fold)

  # start_i = 0; end_i = 0; idx_fold = 1;;
  # for(i in 1:k)
  # {
    # fold_i = matrix(0, 0, ncol(data))
    # start=0; end=0; 
    # for(j in 1:nrow(classes))
    # {
      # idx = as.scalar(classes[j, 1])
      # start = end + 1;
      # end = end + idx
      # class_j =  data[start:end, ]


      # start_i = as.scalar(fold_idxes[j, 1]);
      # end_i = as.scalar(fold_idxes[j, 2])

      # fold_i = rbind(fold_i, class_j[start_i:end_i, ])
    # }

    # dataList = append(dataList, fold_i)
    # fold_idxes[, 1] = fold_idxes[, 2] + 1
    # fold_idxes[, 2] += ins_per_fold
    # while(FALSE){}
  # }

  # for(i in seq(1,k))
  # {
    # [trainList, hold_out] = remove(dataList, i)
    # trainset = rbind(trainList)
    # testset = as.matrix(hold_out)
    # trainX = trainset[, 2:ncol(trainset)]
    # trainy = trainset[, 1]
    # testX = testset[, 2:ncol(testset)]
    # testy = testset[, 1]
    # beta = multiLogReg(X=trainX, Y=trainy, icpt=1, reg=as.scalar(MLhp[1,1]), tol= 1e-9, 
    # maxi=as.scalar(MLhp[1,2]), maxii= 50, verbose=FALSE);
    # [prob, yhat, a] = multiLogRegPredict(testX, beta, testy, FALSE)
    # accuracy = getAccuracy(testy, yhat, isWeighted)
    # accuracyMatrix[i] = accuracy
  # }

# }



