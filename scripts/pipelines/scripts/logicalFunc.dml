#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
# Generate the logical pipelines for data cleaning

source("scripts/pipelines/scripts/utils.dml") as utils;

# incomplete implementation of automatic logical pipelines
generateLogicalSeed = function(Matrix[Double] X, Matrix[Double] Y, Matrix[Double] mask)
return(Frame[String] logical){
  
  # detection = 
  logical = as.frame("")
  no_of_mv = sum(is.na(X))
  X = replace(target= X, pattern = NaN, replacement = 0)
  
  # get the stats
  minVal = min(X)
  maxVal = max(X)
  colMin = colMins(X)
  colMax = colMaxs(X)
  distinctCategories = colMaxs(X) * mask
  colMean = colMeans(X)
  colSd = colSds(X)
  count3sdplus = sum(X > (colMean + 3*colSd )) 
  count3sdminus = sum(X < (colMean - 3*colSd )) 
  outliers = count3sdplus + count3sdminus
  ctab = table(Y, 1)
  minCatPer = min(ctab) / nrow(ctab)
  maxCat = max(ctab) / nrow(ctab)
  
  mv_to_data_ratio = no_of_mv/(nrow(X) * ncol(X))
  out_to_data_ratio = outliers/ (nrow(X) * ncol(X))
  
  if(no_of_mv > 0)
    logical = cbind(logical, as.frame("MVI"))
  if(out_to_data_ratio > 0.1)
    logical = cbind(logical, as.frame("OTLR"))
  if(maxVal - minVal > 1000)
    logical = cbind(logical, as.frame("SCALE"))
  if((maxCat - minCatPer) > 0.3)
    logical = cbind(logical, as.frame("CI"))
  if(sum(mask) > 0) {
    logical = cbind(logical, as.frame("DUMMY"))
    if(sum(distinctCategories) > 5*ncol(X))
      logical = cbind(logical, as.frame("DIM"))
  
  logical = logical[, 2:ncol(logical)]
  }
}



transformLogical = function(Frame[String] seed)
return(Frame[Unknown] transformLogical) {
  transformLogical = frame(0, rows=3, cols= ncol(seed)+2)
 
  # case 1: MVI and OTLR
  if(as.scalar(seed[1,1]) == "MVI" & as.scalar(seed[1,2]) == "OTLR")
  {
   # t1: swap MV and OTLR 
    transformLogical[2,1] = seed[1,2]
    transformLogical[2,2] = seed[1,1]
    transformLogical[2, 3:ncol(seed)] = seed[1,3:ncol(seed)]
  
    # t2: if the sequence is MVI, OTLR then introduce an MVI after to avoid nulls

    transformLogical[3,1:2] = seed[1,1:2]
    transformLogical[3,3] = seed[1,1]
    transformLogical[3, 4:ncol(seed)] = seed[1,3:ncol(seed)]
  }
  # case 2: OTLR
  else if(as.scalar(seed[1, 1]) == "OTLR")
  {
    # if first operation is OTLR then add a MVI to fill in MVs introduced by OTLR
    transformLogical[2,1] = seed[1, 1]
    transformLogical[2,2] = "MVI"
    transformLogical[2, 3:ncol(seed)] = seed[1,2:ncol(seed)]
  }
  transformLogical[1, 1:ncol(seed)] = seed
  transformLogical = map(transformLogical, "var -> var.replace(\"0\", \"\")")
  transformLogical = utils::frameRemoveEmpty(target=transformLogical, margin="cols", select=as.matrix(0))
  if(nrow(transformLogical) > 1)
    transformLogical = utils::frameRemoveEmpty(target=transformLogical, margin="rows", select=as.matrix(0))

}


